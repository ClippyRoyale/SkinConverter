version,7,6,0 # The version of the Converter app that this script is made for.

# Metadata: doesn't affect how the script runs but will be displayed before running the script.
name,documentation
author,clippy
description,The documentation for the skin converter.

open,smb_skin*.png # Path of the main image to open and copy from. 
# Special options:
    # Skip the "open" line entirely if you want the user to select which image to open for conversion. If you want to be more explicit when writing your code, you can also enter the number 1 as the path. (For backwards compatibility, you can also trigger this behavior by entering ".INPUT" instead of a path. If for some reason you want to open a file with the name ".INPUT", entering the path as "./.INPUT" should work.)
    # If you don't want to open any existing image (for example, if you want to create an image completely from scratch), enter the number 0 as the path.
    # If you want to convert multiple images at once, enter a * in the place where you want the converter to insert a number; see "start"/"stop" below for more on this.

save,smb_edit*.png # File path to save to. (If there's already a file on your computer with this path, the converter will ask if you want to overwrite the file.)
# Special options:
    # Skip the "save" line entirely if you want the user to select where to save the converted image. (As with "open", entering ".INPUT" or `1` as the save path will do the same thing.)
    # If you don't want to save an image (for example, if you just want the app to display some text on screen), enter the number 0 as the path.
    # If you want to convert multiple images at once, enter a * in the place where you want the converter to insert a number; see "start"/"stop" below for more on this.

# If you want to convert a collection of sequentially-numbered images, use these commands. For example, the commands below mean that image #0 will be the first image converted, and image #42 will be the last image.
start,0
stop,42

template,smb_skin2580.png # Template image to copy/paste from in place. No user input offered here because this image is supposed to stay the same.

alt,smb_skin1.png # Alternate image to copy from.

base,blank # Add this code to use a blank template-sized image as the base; otherwise, the "open" image will be the base.
base,256,256 # Start with a blank image with the given size (instead of using the old image's size)

# FLAGS: These change the basic rules regarding how the converter interprets scripts files.
flag,loop_limit,10000 # To prevent infinite loops (or gotos, etc.) from freezing the converter, a script will crash if any single line of code runs 10,000 times. If you need to run a loop more (or fewer) times than that, you can manually change the loop limit. (Alias: command "looplimit,<NUMBER>")
flag,index_from,0 # By default, loops start counting from 0. Setting this flag to 1 makes them start from 1 instead.
flag,closed_ranges,0 # By default, loops use open ranges. For example "for,$i,0,10" runs for 0≤x<10. Enabling this flag makes it work like 0≤x≤10 instead. For backwards compatibility, the start/stop header commands will always use closed ranges.

# Everything above this line is a header command.
# Each one can only appear once. 
# If you use the same header command more than once,
# only the first instance will be used; the rest will be ignored.
# Header commands cannot contain subcommands or references to variables.
# Header commands will be ignored if they are placed inside a block (e.g. an if statement or a while loop).

# The main conversion code is below.
# <> = required arguments
# [] = optional arguments (with default value used when omitted)



# LOG/EXIT COMMANDS
# By default, the converter will run through the whole conversion script, then save the new image and exit.

noop # Does nothing. Can also be a subcommand.

exit # End the conversion early, but save the target file as is and exit properly.

skip # End the conversion early without saving or displaying an error message. Intended for use in batch conversion where you want to flag only files that meet specific criteria.

error,Stop conversion without saving and display this optional message on the screen

warning,Your warning here (will be displayed onscreen after conversion)

assert,(=,$x,0)<cond> # Test that the condition `cond` is true. If it is false, stop the script and display a warning.

# Comment: The hash (#) and everything after it will be ignored by the interpreter.
# You may also want to "comment out" lines that aren't working in your scripts.



# BASIC COPYING COMMANDS
# For all commands in this section:
# If you don’t give x or y, apply command to whole image: x=0, y=0, width and height are the same as the image's width and height.
# If you give x and y but not width or height: width=16, height=16
# If you give x, y, and width, but not height: height=width 

copy,0[oldX],0[oldY],0[newX],0[newY],16[width],16[height] # Copy from old image to specified position in new image.

copyalt,0[oldX],0[oldY],0[newX],0[newY],16[width],16[height] # Copy from alt image to specified position in new image. (Alias: copy_alt)

copyfrom,old<imageName>,0[oldX],0[oldY],0[newX],0[newY],16[width],16[height] # Copy from any image ("old", "alt", "template", or even "new") to specified position in new image. (Alias: copy_from)

default,0[x],0[y],16[width],16[height] # Copy from template image to same position in new image.

defaultfrom,template<imageName>,0[x],0[y],16[width],16[height] # Copy from any image ("old", "alt", "template", or even "new") to same position in new image. (Alias: default_from)

clear,0[x],0[y],16[width],16[height] # Clear area from new image.

duplicate,0<oldX>,0<oldY>,0<newX>,0<newY>,16[width],16[height] # Copy an area on the NEW image to another position on the same canvas.

move,0<oldX>,0<oldY>,0<newX>,0<newY>,16[width],16[height] # Cut an area on the NEW image, and paste it in another position on the same canvas.

swap,0<x1>,0<y1>,16<x2>,0<y2>,16[width],16[height] # Swap the pixels contained in two different areas on the new image. The areas you want to swap must have the same width and height.

over,0[oldX],0[oldY],0[newX],0[newY],16[width],16[height],"old"[imageName] # Like copy, except overlay the copied area on top of the existing pixels (using alpha blending), instead of clearing them.

under,0[oldX],0[oldY],0[newX],0[newY],16[width],16[height],"old"[imageName] # Like copy, except place the copied area underneath the existing pixels (using alpha blending).



# ADVANCED COPYING COMMANDS
# These commands build on the basic copying commands but allow you to do complicated tasks with fewer commands. They can be very powerful, but they have more complex syntax.

tile,0<copyX>,0<copyY>,16<copyWidth>,16<copyHeight>,0<pasteStartX>,0<pasteStartY>,16<pasteCountHoriz>,16<pasteCountVert>,open[copySource: old, template, or alt] # Create a tile pattern on the new image using a part of the old image.

copyscale,0<oldX>,0<oldY>,32<oldWidth>,32<oldHeight>,0<newX>,0<newY>,16<newWidth>,16<newHeight>,1[algo],old[source] # Copy from the old (or alternative source) image to the new image, while scaling the copied area to a new width/height. 
# The following scaling algorithms are available in order of complexity:
# 0 / nearest: Nearest-neighbor scaling, no interpolation. My implementation differs from PIL's in that it attempts to preserve symmetry in the original image/area. (When scaling from even to odd pixel sizes on a given axis, this is not possible, so I get as close as I can -- the middle will be off.)
# 1 / default / super: Supersampling. This is more commonly used for rendering video game graphics, but it's pretty good for scaling pixel art too. When the scale factor is an integer, it'll look the same as nearest-neighbor.
# 2 / bilinear / linear: Bilinear interpolation, the way many operating systems and web browsers scale images for preview purposes. Direct from PIL's implementation.
# 3 / bicubic / cubic: Bicubic interpolation, the default interpolation in many image-editing programs' scaling commands. Direct from PIL's implementation.



# TRANSFORMATION COMMANDS

resize,256<newWidth>,256[newHeight],0[xOffset],0[yOffset] # Resize the new image's canvas. Does not perform any scaling. If no height given, create a square canvas. Anchor at top left by default, or move original image right by `offsetX` pixels and down by `offsetY` pixels.

crop,0<x>,0<y>,0<width>,0<height> # Same functionality as resize, but in a way that makes more sense if you want to make the image smaller

rotate,90<degreesClockwise: multiple of 90>,0<x>,0<y>,16[size] # Rotate the area in place on the new image. Unlike copy commands, only one size argument is used, as the rotated area must be square. If you want to rotate a rectangular area 180°, flip it horizontally then vertically instead. TODO: add arbitrary rotation w/ interpolation

flip,x<direction: x or y>,0[x],0[y],16[width],16[height]
# Flip the area in place on the new image. Unlike rotation, width and height can be different here.
# If you don’t give x or y, apply command to whole image: x=0, y=0, width and height are the same as the image's width and height.
# If you give x and y but not width or height: width=16, height=16
# If you give x, y, and width, but not height: height=width 



# FILTER COMMANDS

# All filters are applied in place to the specified area on the new image.

# For all commands in this section:
# If you don’t give x or y, apply command to whole image: x=0, y=0, width and height are the same as the image's width and height.
# If you give x and y but not width or height: width=16, height=16
# If you give x, y, and width, but not height: height=width 

grayscale,0[x],0[y],16[width],16[height] # Converts the area to grayscale (AKA black-and-white). For the command that literally makes the area only black and white (1-bit), use "threshold".

invert,0[x],0[y],16[width],16[height] # Inverts the area. For example, black becomes white, and red becomes cyan. Alpha levels will be unchanged.

rgbfilter,0<redAdjust: -255 to +255>,0<greenAdjust>,0<blueAdjust>,0[x],0[y],16[width],16[height] # Adjusts the R/G/B color balance. You can use all three adjust arguments at the same time to adjust brightness. (Aliases: colorfilter, color_filter)

opacity,0<adjust: -255 to +255>,0[x],0[y],16[width],16[height] # Adjusts the opacity (alpha) levels. Negative = more transparent, positive = more opaque.

hslfilter,0<hueAdjust: -180 to +180>,0<saturationAdjust: -100 to 100>,0<lightnessAdjust: -100 to 100>,0[x],0[y],16[width],16[height] # Adjusts hue, saturation, and lightness at the same time.

filter.hue,0<adjust: -180 to +180>,0[x],0[y],16[width],16[height] # Adjusts the hue.

filter.saturation,0<adjust: -100 to +100>,0[x],0[y],16[width],16[height] # Adjusts the saturation (in HSLA color space). Positive adjust means more colorful. Negative adjust means less colorful. -100 means grayscale.

filter.lightness,0<adjust: -100 to +100>,0[x],0[y],16[width],16[height] # Adjusts the lightness (in HSLA color space). Positive adjust means lighter. Negative adjust means darker. -100 means all black, +100 means all white.

filter.fill,0<red: 0 to 255>,0<green: 0 to 255>,0<blue: 0 to 255>,255[alpha: 0 to 255],0[x],0[y],16[width],16[height] # Fills the area with the selected color.

contrast,0<adjust: -128 to 128>,0[x],0[y],16[width],16[height] # Adjusts the contrast. -128 will make all non-transparent pixels medium gray; +127 will make all RGB values either 0 or 255 (8 colors).

colorize,180<hue: 0 to 359>,50<saturation: 0 to 100>,50<lightness: 0 to 100>,0[x],0[y],16[width],16[height] # Colorizes specified area in place. Converts area to B&W, treats L=127.5 as the specified HSL color, and interpolates the rest from there. Ex.: if the base color was coral [hsl(0,100,75)], it'll turn black->gray50->white to red->coral->white.

sepia,0[x],0[y],16[width],16[height] # Simplified colorize syntax for creating sepia-toned images. Based on hex code #a08060 or HSL(30,25,50)

threshold,128<minWhite: 0 to 256>,0[x],0[y],16[width],16[height]
# Converts the image to 1-bit black & white based on a numeric lightness threshold, determined by grayscale (luma) value. Any number LESS THAN minWhite is black, any number GREATER or EQUAL is white. Set minWhite to 0 to make everything white. Set minWhite to 256 to make everything black. Alpha levels for each pixel will be unchanged.

selcolor,red<color>,0<hueAdjust: -180 to +180>,0<saturationAdjust: -100 to 100>,0<lightnessAdjust: -100 to 100>,0<x>,0<y>,16<width>,16<height> # Selective color: selects all pixels that have hues within a given sixth of the HSL color wheel (red, yellow, green, cyan, blue, magenta), and applies the HSL shift filter to each of those pixels.

2color,0<hue>,100<saturation>,50<lightness>,0[x],0[y],16[width],16[height] # Simulates the effect of a two-color print job, where one of the colors is black. The hue/saturation/lightness arguments are for the second color. Unlike colorize, this is not recommended for use with black-and-white images, as the filter uses saturation data to determine how much color each pixel should have. (Alias: twocolor)

recolor,()<oldColor>,$_fillcolor<newColor>,0[x],0[y],16[width],16[height] # Replace every pixel matching `oldColor` with `newColor`. If `oldColor` is null, recolor all non-transparent colors.
recolor,(list,(color,"red"),(color,"yellow"))<oldColors>,(list,(color,"green") (color,"blue"))<newColors>,0[x],0[y],16[width],16[height] # You can also call `recolor` on two lists of equal length, in which case the first element of `oldColors` will be replaced by the first element of `newColors`, etc.



# LIST COMMANDS
# For manipulating lists. See also "list subcommands" for how to create lists.

list.add,$l<listVar>,"thing"<item> # Add an item to the end of an existing list (in place).

list.addall,$l1<list1>,(list,a,b)<list2> # Add all items in list2 to the end of list1. (Using these arguments with list.add would add list1 as a single element on the end of list1.)

list.clear,$l<listVar> # Removes all items from the list.

list.insert,$l<listVar>,0<index>,"thing"<item> # Insert new item into listVar, BEFORE the item currently at the given index.

list.remove,$l<listVar>,0<index> # Remove the item at the given index from the list; shift the items after it to the left. Note that this is different from the Python method `l.remove()` that removes based on value rather than index.

list.replace,$l<listVar>,0<index>,"thing"<item> # Replace the contents of the given `index` of `listVar` with `item`.

list.swap,$l<listVar>,0<index1>,1<index2> # Swap the positions of the items of `listVar` at `index1` and `index2` (eliminating the need to create a temporary variable).



# DRAWING COMMANDS

setpixel,0<x>,0<y>,(color,"red")<color> # Sets the color of the pixel at (x,y) on the base image.

# DRAW: SHAPES

draw.rect,0<x>,0<y>,16<width>,16<height>,0[outline: 0 for fill, 1 for outline, 2 for both] # Draw a rectangle with the top left corner at the given x and y. (Alias: draw.rectangle)

draw.ellipse,0<x>,0<y>,16<width>,16<height>,0[outline: 0 for fill, 1 for outline, 2 for both] # Draw an ellipse with the top left "corner" at the given x and y.

draw.line,0<x1>,0<y1>,16<x2>,16<y2> # Draw a line from (x1,y1) to (x2,y2). Note that this is different from the width/height system used for everything else. The example coordinates would have a width and height of 17 pixels.

# DRAW: OPTIONS

draw.fillcolor,(rgb,255,0,0)<color> # Set the fill color.

draw.linecolor,(rgb,255,0,0)<color> # Set the outline color.

draw.alphablend,1<toggle> # Toggles alpha blending on (1) or off (0). If on, drawing partially transparent shapes will merge their colors with the existing pixels underneath. If off, the pixels underneath will by fully overwritten by the shapes. If this command is not called, alpha blending will be turned ON by default.



# CONTROL FLOW COMMANDS

if,(empty,0,0,16,16)
    # Run the commands here if the above condition is true
elseif,(empty,128,128,32,32)
    # Run the commands here if the first condition is false but the second condition is true
else
    # Otherwise, run the commands here
end 
# "end" is the preferred way to end blocks in 5.1+ but "endif" is supported for backwards compatibility

if1,(...) # Like if, but rather than being the start of a block, you just execute the next line if the conditional is true, then continue with the program.
    # This line is the only line inside the if "block". Maybe you could put a goto here?
# This line is just part of the normal program flow. No "end" needed.

label,hello # Mark a point in the code that you can jump to using "goto".

goto,hello # Jump to a label defined elsewhere in the code.
goto,10 # Jump to the start of line number 10. The first line of your program is 1.

gosub,hello<label> # Go to the label, and put the current line number onto the subroutine stack so you can come back to it later.
goback # Return from the subroutine to the last line number on the subroutine stack. (alias: retsub)

while,(...),0[do] # Keep repeating as long as the condition in argument 1 is true. If `do` is nonzero, the loop always runs at least once (like a do-while loop in C).

for,$i<loopVar>,0[start],10<stop>,1[step] # Create a loop based around incrementing a value by some amount. (BASIC-style for loop)

break,1<numLoops> # Break out of the current loop. If numLoops >= 1, break out of that many levels of loops (assuming loop is nested).

next # Same as "continue" in C/Java/Python, but "next" (as in BASIC) is a better name because we're skipping to the next iteration of the loop.

foreach,$x[indexVar],$i<itemVar>,$l<seq> # Create a loop based around iterating through a list (Python-style for loop). If 2 arguments, the first one is for the current item and the last one is for the list you're iterating through. If 3 arguments, the first one is the current item, the second one is the current index, and the last one is the list.



# DATA COMMANDS

set,$hello<name>,"Hello world"<value> # Set variable "hello" to the string "Hello world". Subcommands in second argument will be evaluated before setting the variable. Any value in double quotes will be treated as a string no matter what. If it's not in quotes and it can be parsed as an integer, the value will be an integer. Anything else will be treated as a string for legacy reasons, but watch out for special characters! (Alias `:=`)

change,$x<varName>,+<subcmdName>,10[arg2],... # Change the value of varName by applying the given subcommand to it. The variable will be the first argument to the command, and any argument after `subcmdName` will be passed as the subcommand's second, third, (etc.) arguments. Example A: `change,$x,+,10,$y` will add (10 plus the value of $y) to $x; this is equivalent to `set,$x,(+,$x,10,$y)`. Example B: `change,$x,*,2` will multiply $x's value by 2; this is equivalent to `set,$x,(*,$x,2)`. Basically, it's nothing you can't already do with set; it just makes code more readable.

const,$TAU<name>,6.283<value> # Set a constant value so you can refer back to it by a recognizable name later. Works the same as "set" but you can't go back and change the value the name refers to.

## Augmented assignment ##
# These commands all follow the same pattern: do a math operation to a
# variable, and then assign it back to the same variable.
# The operator used is whatever is before the equals sign.
# For example: (+=,$x,10,$y) will add (10+$y) to $x, and it's equivalent to
# (change,$x,+,10,$y) or (set,$x,(+,$x,10,$y)).
# Aliases are the same as for basic math operations (e.g. ×= is *=),
# except as noted.

+=,$n,<x1>,[x2],... # (alias: iadd)
-=,$n,<x1>,[x2],... # (alias: isub)
*=,$n,<x1>,[x2],... # (alias: imul)
/=,$n,<x1>,[x2],... # (alias: itruediv)
//=,$n,<x1>,[x2],... # (alias: ifloordiv)
%=,$n,<x1>,[x2],... # (alias: imod)
^=,$n,<x1>,[x2],... # (alias: ipow)

++,$n # Increments $n by 1. Shorthand for (+=,$n,1) and so on. Cannot be called as a subcommand (unlike in C++, etc.)
--,$n # Decreases $n by 1.



# SUBCOMMANDS
# These are useful e.g. as conditions in if statements.

(empty,old[image],0<x>,0<y>,16[width],16[height]) # True if the area on the given image is completely empty (every pixel is transparent), False otherwise.

(iif,<cond>,<ifTrue>,<ifFalse>) # Inline if, as found in functional programming. Returns `ifTrue` if `cond` evaluates to true, and `ifFalse` if `cond` evaluates to false. Uses short-circuiting so only one of the value branches will be evaluated.



# EQUALITY SUBCOMMANDS
# These work exactly the way you'd expect.
# Can be called using Unicode symbols (≥), ASCII approximations (>=), or letters (ge, gte).

(=,x1,x2,...)	# or ==, eq
(!=,x1,x2,...)	# or ≠, <>, ne
(<,x1,x2,...)	# or lt
(>,x1,x2,...)	# or gt
(<=,x1,x2,...)	# or ≤, le
(>=,x1,x2,...)	# or ≥, ge

(<=>,x1,x2) # Three-way comparison ("spaceship") operator. If x1<x2, return -1. If x1=x2, return 0. If x1>x2, return 1. To check the sign of a number, use: (<=>,x,0) (Alias: cmp)



# LOGICAL SUBCOMMANDS
# These always return a bool.

(and,<subcmd1>,<subcmd2>,[subcmd3],...) # Alias: &&
(or,<subcmd1>,<subcmd2>,[subcmd3],...)  # Alias: ||
(not,<subcmd1>)                         # Alias: !

(xor,<subcmd1>,<subcmd2>) # Exclusive OR. No short-circuiting. Only takes a maximum of two arguments.



# MATH SUBCOMMANDS
# These mostly work exactly the way you'd expect.

(+,x1,x2,...)	# Add two or more numbers. (Alias: add)
(+,"Hello"<s1>,"World"<s2>,...) # Concatenate two or more strings. (The result of the example is "HelloWorld".)
(+, (list,0,1)<l1>, (list,"a","b")<l2>, ...) # Return a combination of two or more lists. The arguments themselves will not be changed.

(-,x1,x2,...)	# Subtract two or more numbers. (Aliases: sub, − [minus sign], or – [en dash]. The symbol in the example is an ASCII hyphen.)
(-,x)           # Unary minus sign, negates x. Equivalent to (*, x, -1)

(*,x1,x2,...)	# Multiply two or more numbers. (Aliases: mul, × [multiplication sign, not letter X])
(*,"Hello"<s>,3<n>) # Repeat a string n times. (Result of example: "HelloHelloHello")
(*, (list,0,1)<l>, 2<n>) # Repeat a list n times. The original list will not be changed.

(/,x1,x2,...)	# Divide two or more numbers. Do not round the result. The result will always be a floating-point number. (Aliases: truediv, ÷)

(//,x1,x2,...)	# Integer division: divide two or more numbers, then round the result down to the nearest integer. (Aliases: floordiv, div, ÷÷)

(%,x1,x2,...) # Modulo: divide two or more numbers and return the remainder. (Alias: mod)

(^,x1,x2,...) # Raise one number to the power of another. Technically you *can* add x3, x4, etc but it'll make the program crash/freeze VERY quickly. (Aliases: pow, **, ××)

(abs,x1) # Absolute value: makes x1 positive if it isn't already

(floor,x1) # Floor: returns the nearest int <= x1

(ceil,x1) # Ceiling: returns the nearest int >= x1 (alias: ceiling)

(min,x1,x2...) # Returns the minimum value out of the arguments passed in.
(min,(list,x1,x2,...)) # Returns min value out of the list

(max,x1,x2...) # Returns the maximum value out of the arguments passed in.
(max,(list,x1,x2,...)) # Returns max value out of the list

(round,1.2<x>,$_false[decPlaces]) # Round using standard mathematical rules. This is a wrapper around Python's built-in function of the same name, so there may be some weird edge cases. If an int is given for decPlaces, return a float rounded to that many decimal places. (Negative integers allow you to round to higher place values; e.g. -1 = round to tens place). If decPlaces is not given or is set to a non-integer value, return an int.



# SEQUENCE SUBCOMMANDS
# For working with the data sequence types, strings and lists.

(len,"thing"<data>) # Length of any variable or literal. Most useful for strings and lists. Calls the python function of the same name. (Alias: length)

(get,$x<seq>,0<index>) # Returns the item at index 0 of the given list/string. The first item has index 0, second item has index 1, etc., unless you change the index_from flag. In addition, index -1 is the last item, -2 is the second-to-last item, etc. Name taken from Python's <dict>.get() method, because "sub" (subscript) was already taken by subtraction.

(slice,$s<seq>,0<start>,2[stop],1[step]) # Returns a sublist of the given list. Omitting the stop value means slice the entire rest of the list. Entering a step value greater than 1 means only include every Xth item of the list.

(in,"Hello"<seq>,"l"<sub>) # Return $_true if `sub` is a member of `seq`, and $_false otherwise.

(find,"Hello"<seq>,"l"<item>,0[start],()[stop]) # Return the index of the first occurrence of item/substring `item` in the list/string `seq`. Return -1 if `item` couldn't be found anywhere in `seq`. Use `start` and `stop` arguments to only search a subset of the sequence.

(sum,(list,1,2,3,0.5)<list>) # Returns the sum of all items in the list. This makes the most sense with lists of numbers, but you can technically do it with anything you can use + on. (Right now this is only useful for lists but it would also be applicable to dictionaries, etc if they were added.)

(count,"Hello"<seq>,"l"<sub>) # Counts the number of times the item/substring `sub` appears in the list/string `seq`.

(reverse,$s<seq>) # Returns a reversed version of the list/string, so that the first item/char and the last item/char are swapped, the second and second-to-last are swapped, and so on. The contents of the variable you pass in is not changed.



# LIST SUBCOMMANDS

(list,x1,x2,x3,...) # Creates an editable, variable-length list with the given items.

(range,0[start],10<stop>,1[step]) # Returns a list consisting of a sequence of numbers counting from `start` to `stop`, and counting up by `step` every time. Unlike Python's range function, any of the arguments can be floats too.

(sort,$l<list>,""[key],[keyArg2],[keyArg3]...) # Returns a sorted version of the list l, in ascending order according to Python's built-in Timsort algorithm. The function will return a new list, and will not modify the contents of the last you pass in. 
# The optional `key` argument lets you specify a subcommand to apply some operation to values before sorting them. For example, if key="lower" when sorting a list of strings, then the converter will sort alphabetically and ignore case (otherwise, it'll sort by Unicode codepoint, which may lead to unexpected results). And if key="lightness" for a list of colors, it'll sort from darkest to lightest.
# The key function can even have multiple arguments; for example, if $l is a list of lists, (sort $l get 0) will sort by the first item of each sub-list. 
# Using this function on strings is deprecated in v7.6, and it will be removed in v8.0.



# STRING SUBCOMMANDS

(upper,"Hello"<str>) # Convert string to all caps. (Alias: uppercase)
(lower,"Hello"<str>) # Convert string to all lowercase. (Alias: lowercase)

(titlecase,"hello world"<str>) # Convert string to title case (first letter of each word capitalized; rest of word lowercase). This isn't a "true" title case, because short words like "a", "of", or "the" are still capitalized. Python has a similar function, but it's buggy so I made my own.
(sentencecase,"hello"<str>) # Capitalize first letter of string, make the rest lowercase.

(startswith,"Hello"<str>,"He"<substr>) # Returns true if str starts with substr; false otherwise.
(endswith,"Hello"<str>,"lo"<substr>) # Returns true if str ends with substr; false otherwise.

(join,(list,"Hello","World")<strList>,""[sep]) # Combine the contents of `strList` into one string, with each item separated by `sep` (or nothing, if no separator is given, as in the example).

(split,"Hello World"<str>,""[sep],-1[maxSplit]) # Split the string `str` into a list of substrings. By default (or if `sep` is any empty string), the interpreter will split at every sequence of whitespace; otherwise, it will split every time the substring `sep` is reached. `maxSplit` is the maximum number of splits that will be done (i.e. the length of the resulting list will always be ≤ (maxSplit+1)); the default value -1 means no limit.



# TYPE SUBCOMMANDS
# For converting between data types.

(int,1.5) # Convert a value to integer format, if possible.
(int,"0f"<value>,16[base]) # Only for string values: you can specify the base the string is in (from 2-36), and it'll convert it correctly.

(float,1)

(str,1)
(str,"Hello"<x1>,"World"[x2],1[x3],...) # Convert the argument(s) to a string. If more than one argument is passed in, they will each be converted to strings, then concatenated together. The result of the example will be "HelloWorld1" (with no spaces in between because neither string had a space in it). (aliases: string, str+, str_add)

(bool,1) # alias: boolean

(hex,17<x>,#_t[prefix]) # Return hexadecimal string representation of x. `prefix` determines whether to include the "0x" prefix at the start of the string. You can also set `prefix` to a string to add a custom prefix. Ex: (hex 17) => "0x11", (hex 255 "#") => "#0000ff"

(bin,7<x>,#_t[prefix]) # Return binary string representation of x. `prefix` determines whether to include the "0b" prefix at the start of the string. You can also set `prefix` to a string to add a custom prefix. Ex: (bin 7) => "0b111"

(type,$x<data>) # Returns the data type of the given variable (or literal), as a string. Possible types: "int", "float", "str", "bool", "list", "color", "null"



# COLOR TYPE SUBCOMMANDS
# These commands return the Color data type.

(color,"#ff0000"<hex>) # Define a color based on a *string* consisting of a "#" followed by 6 or 8 hexademical numbers. Hex codes can be in the format #RRGGBB or #AARRGGBB (e.g. "#80ffff00" will be a 50% transparent yellow).
(color,"red"<name>) # Define a color based on this list of 24 color names:
    red: #ff0000
    maroon: #800000
    orange: #ff8000
    brown: #804000
    tan: #c08040
    peach: #ffd0a0
    amber: #ffc000
    yellow: #ffff00
    olive: #808000
    lime: #00ff00
    green: #008000
    cyan: #00ffff
    teal: #008080
    azure: #0080ff
    blue: #0000ff
    navy: #000080
    violet: #8000ff
    purple: #800080
    magenta: #ff00ff
    pink: #ff80ff
    black: #000000
    gray: #808080
    silver: #c0c0c0
    white: #ffffff
    transparent: #00000000
(color,n00) # Define a color from the NES palette (Nestopia's 15° Canonical palette to be exact). Colors are numbered in hexadecimal from n00 to n3f.

(rgba,0<red: 0 to 255>,0<green: 0 to 255>,0<blue: 0 to 255>,255[alpha: 0 to 255]) # Alias: rgb

(hsla,0<hue: 0 to 359>,100<saturation: 0 to 100>,50<lightness: 0 to 100>,255[alpha: 0 to 255]) # Define a color based on the hue/saturation/lightness (or luminosity) model, plus optional alpha. (Alias: hsl)

(getpixel,new[image],0<x>,0<y>) # Returns Color object of the color at the given (x,y) position on the given image.

(pal.get,0[x],0[y],0[width],0[height]) # Return a list of all colors in the area/image. Follows filter rules for omitted arguments. (NOTE: More palette commands will be added in future updates; I just needed to add this to v7.6 because the existing workaround had poor performance.)



# COLOR INFO SUBCOMMANDS
# These return RGBA, HSLA, etc. color values of a pixel, or (if width and height are given) the average value across an area (as an integer). You can specify the name of an image you want to get the data point from, or go right to coordinates if you want to get data from the old image.

(getrgba,new[image],0<x>,0<y>,1[width],1[height]) # Return a list consisting of the [red, green, blue, alpha] values of a Color object, pixel, or area of pixels.

(gethsla,new[image],0<x>,0<y>) # Return a list consisting of the [hue, saturation, lightness, alpha] values of a Color object or pixel. Does NOT support averaging an area of pixels because that concept simply doesn't make sense given that hue is a circle.

(red,old[image],0<x>,0<y>,1[width],1[height]) # Return the red value (from 0 to 255) of a single pixel. If width and height are given, take the average value over the given rectangle.
(green,old[image],0<x>,0<y>,1[width],1[height])
(blue,old[image],0<x>,0<y>,1[width],1[height])

(alpha,old[image],0<x>,0<y>,1[width],1[height]) # This is for GETTING the alpha value (from 0 to 255). For applying a transparency filter, use "opacity".

(hue,old[image],0<x>,0<y>,1[width],1[height]) 		# from 0 to 359
(saturation,old[image],0<x>,0<y>,1[width],1[height])	# In the HSL sense; from 0 to 100
(lightness,old[image],0<x>,0<y>,1[width],1[height])	# Not to be confused with value AKA brightness; from 0 to 100 (alias: luminosity)

# The same commands can be used on color values and variables:
(red,(rgb,255,128,0)<color>) # Return the red attribute of a color.
(green,(rgb,255,128,0)<color>)
(blue,(rgb,255,128,0)<color>)
(alpha,(rgb,255,128,0)<color>)
(hue,(rgb,255,128,0)<color>)
(saturation,(rgb,255,128,0)<color>)
(lightness,(rgb,255,128,0)<color>) # (alias: luminosity)



# IMAGE INFO SUBCOMMANDS
# These return info about a named image.

(width,open<imageName>) # Returns the width of the image with the specified name.
(height,open<imageName>) # Returns the height of the image with the specified name.


###############################################################################
###############################################################################

# COMING SOON:
# [This section has been removed because it is now out of date.
# All information on upcoming commands is now in the documentation for v8.0,
# which is still in the works.]